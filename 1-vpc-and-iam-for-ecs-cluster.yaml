AWSTemplateFormatVersion: "2010-09-09"
Description: VPC Infrastructure with Public Subnets for an ECS Cluster
Parameters:
  EnvironmentName:
    Type: String
    Default: vpc-and-iam-for-ecs-cluster
    Description: "VPC Infrastructure with Public Subnets for an ECS Cluster"
Mappings:
  CIDR:
    VPC-CIDR:
      CIDR: "172.16.0.0/16"
    PublicSubnet1-CIDR:
      CIDR: "172.16.0.0/24"
    PublicSubnet2-CIDR:
      CIDR: "172.16.1.0/24"
    PublicSubnet3-CIDR:
      CIDR: "172.16.2.0/24"

Resources:
  ## VPC Infrastructure
  ECSDemoVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ["CIDR", "VPC-CIDR", "CIDR"]
      Tags:
        - Key: "Name"
          Value: "ECSDemoVPC"
  ## Two Public Subnets
  ECSDemoPublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: "AWS::Region" }
      Tags:
        - Key: "Name"
          Value: "ECSDemoPublicSubnetOne"
      VpcId: !Ref "ECSDemoVPC"
      CidrBlock: !FindInMap ["CIDR", "PublicSubnet1-CIDR", "CIDR"]
      MapPublicIpOnLaunch: true
  ECSDemoPublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: { Ref: "AWS::Region" }
      Tags:
        - Key: "Name"
          Value: "ECSDemoPublicSubnetTwo"
      VpcId: !Ref "ECSDemoVPC"
      CidrBlock: !FindInMap ["CIDR", "PublicSubnet2-CIDR", "CIDR"]
      MapPublicIpOnLaunch: true
  ## IGW and Route Tables
  ECSDemoInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: "Name"
          Value: "ECSDemoInternetGateway"
  ECSDemoGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref "ECSDemoVPC"
      InternetGatewayId: !Ref "ECSDemoInternetGateway"
  ECSDemoPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "ECSDemoVPC"
      Tags:
        - Key: "Name"
          Value: "ECSDemoPublicRouteTable"
  ECSDemoPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: ECSDemoGatewayAttachment
    Properties:
      RouteTableId: !Ref "ECSDemoPublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref "ECSDemoInternetGateway"
  ECSDemoPublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ECSDemoPublicSubnetOne
      RouteTableId: !Ref ECSDemoPublicRouteTable
  ECSDemoPublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ECSDemoPublicSubnetTwo
      RouteTableId: !Ref ECSDemoPublicRouteTable

  ECSEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:CreateCluster"
                  - "ecs:DeregisterContainerInstance"
                  - "ecs:DiscoverPollEndpoint"
                  - "ecs:Poll"
                  - "ecs:RegisterContainerInstance"
                  - "ecs:StartTelemetrySession"
                  - "ecs:Submit*"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                Resource: "*"
      Tags:
        - Key: "Name"
          Value: "ECS-EC2-Role"
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # allow ECS to use ENIs
                  - "ec2:AttachNetworkInterface"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:CreateNetworkInterfacePermission"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DeleteNetworkInterfacePermission"
                  - "ec2:Describe*"
                  - "ec2:DetachNetworkInterface"
                  # allow ECS to use ALB
                  - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                  - "elasticloadbalancing:DeregisterTargets"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  - "elasticloadbalancing:RegisterTargets"
                Resource: "*"
      Tags:
        - Key: "Name"
          Value: "ECS-Service-Role"
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # allow ECS Tasks to download images from ECR
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  # allow ECS tasks to upload logs to CloudWatch
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

Outputs:
  VpcId:
    Description: ECS DemoVPC ID
    Value: !Ref "ECSDemoVPC"
    Export:
      Name: !Sub ${EnvironmentName}:VpcId
  ECSDemoPublicSubnetOne:
    Description: Public Subnet One
    Value: !Ref "ECSDemoPublicSubnetOne"
    Export:
      Name: !Sub ${EnvironmentName}:ECSDemoPublicSubnetOne
  ECSDemoPublicSubnetTwo:
    Description: Public Subnet Two
    Value: !Ref "ECSDemoPublicSubnetTwo"
    Export:
      Name: !Sub ${EnvironmentName}:ECSDemoPublicSubnetTwo
  ECSServiceRole:
    Description: The ARN of the ECS role
    Value: !Ref "ECSServiceRole"
    Export:
      Name: !Sub ${EnvironmentName}:ECSServiceRole
  ECSEC2Role:
    Description: The ARN of the EC2 role
    Value: !Ref "ECSEC2Role"
    Export:
      Name: !Sub ${EnvironmentName}:ECSEC2Role
  ECSTaskExecutionRole:
    Description: The ARN of the ECS role
    Value: !Ref "ECSTaskExecutionRole"
    Export:
      Name: !Sub ${EnvironmentName}:ECSTaskExecutionRole
